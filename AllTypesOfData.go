package main

import "fmt"

func main() {
	// –ß–∏—Å–ª–∞

	var i int = 42 // —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (—Ä–∞–∑–º–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)
	var i8 int8 = -128 // 8-–±–∏—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ (-128..127)
	var i16 int16 = 32000 // 16-–±–∏—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ
	var i32 int32 = 2_000_000 // 32-–±–∏—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ
	var i64 int64 = 9_000_000_000 // 64-–±–∏—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ

	var u uint = 42 // –±–µ–∑–∑–Ω–∞–∫–æ–≤–æ–µ —Ü–µ–ª–æ–µ (>=0)
	var u8 uint8 = 255  // 8-–±–∏—Ç–Ω–æ–µ –±–µ–∑–∑–Ω–∞–∫–æ–≤–æ–µ (0..255)
	var u16 uint16 = 65000 // 16-–±–∏—Ç–Ω–æ–µ –±–µ–∑–∑–Ω–∞–∫–æ–≤–æ–µ
	var u32 uint32 = 4_000_000 // 32-–±–∏—Ç–Ω–æ–µ –±–µ–∑–∑–Ω–∞–∫–æ–≤–æ–µ
	var u64 uint64 = 18_000_000_000 // 64-–±–∏—Ç–Ω–æ–µ –±–µ–∑–∑–Ω–∞–∫–æ–≤–æ–µ

	var f32 float32 = 3.14 // 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
	var f64 float64 = 2.718281828   // 64-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á–∞—â–µ)
	
	var c64 complex64 = 1 + 2i  // –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —á–∏—Å–ª–æ (float32)
	var c128 complex128 = 2 + 3i // –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —á–∏—Å–ª–æ (float64)


	// –õ–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–∏–ø
	var b bool = true

	// –°—Ç—Ä–æ–∫–∏
	var s string = "Hello, Go!"

	// –°–∏–º–≤–æ–ª—ã
	var r rune = '–Ø' // rune = int32 (UTF-8 —Å–∏–º–≤–æ–ª)
	var by byte = 'A'  // byte = uint8 (–æ–¥–∏–Ω –±–∞–π—Ç)

	// –£–∫–∞–∑–∞—Ç–µ–ª–∏
	var p *int = &i

	// –ú–∞—Å—Å–∏–≤—ã
	var arr[3]int = [3]int{1, 2, 3}

	// –°—Ä–µ–∑—ã
	slice := []int{10, 20, 30}

	// Map
	m := map[string]int{"Alice": 25, "Bob": 30}

	// Struct
	type Person struct {
		Name string
		Age int
	}

	alice := Person{"Alice", 25}

	// Interface
	var any interface {} = "–ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"

	// –§—É–Ω–∫—Ü–∏–∏ 
	add := func(a, b int) int {
		return a + b
	}

	// –ö–∞–Ω–∞–ª—ã
	ch := make(chan int)

	// –í–´–í–û–î
	fmt.Println("–ß–∏—Å–ª–∞:", i, i8, i16, i32, i64, u, u8, u16, u32, u64, f32, f64)
	fmt.Println("–ö–æ–º–ª–µ–∫—Å–Ω—ã–µ:", c64, c128)
	fmt.Println("–ë—É–ª–µ–≤:", b)
	fmt.Println("–°—Ç—Ä–æ–∫–∞:", s)
	fmt.Println("Rune:", r, string(r))
	fmt.Println("Byte:", by, string(by))
	fmt.Println("–£–∫–∞–∑–∞—Ç–µ–ª—å:", p, *p)
	fmt.Println("–ú–∞—Å—Å–∏–≤:", arr)
	fmt.Println("–°—Ä–µ–∑:", slice)
	fmt.Println("Map:", m)
	fmt.Println("Struct:", alice)
	fmt.Println("Interface:", any)
	fmt.Println("–§—É–Ω–∫—Ü–∏—è:", add(2, 3))
	fmt.Println("–ö–∞–Ω–∞–ª:", ch)

}

// üìå –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –µ—Å—Ç—å –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∏–ø–æ–≤ –≤ Go:

// –ß–∏—Å–ª–æ–≤—ã–µ (int, uint, float, complex)

// –õ–æ–≥–∏—á–µ—Å–∫–∏–π (bool)

// –°—Ç—Ä–æ–∫–∏ –∏ —Å–∏–º–≤–æ–ª—ã (string, rune, byte)

// –£–∫–∞–∑–∞—Ç–µ–ª–∏

// –ö–æ–ª–ª–µ–∫—Ü–∏–∏ (array, slice, map)

// –°–æ—Å—Ç–∞–≤–Ω—ã–µ (struct)

// –û—Å–æ–±—ã–µ (interface{}, —Ñ—É–Ω–∫—Ü–∏–∏, –∫–∞–Ω–∞–ª—ã)