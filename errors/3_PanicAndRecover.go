// panic останавливает программу (как исключение).
// recover позволяет «поймать» панику и продолжить выполнение.

package main

import "fmt"

func mayPanic() {
	panic("что-то пошло не так")
}

func main() {
	defer func() {
		if r := recover(); r != nil {
			fmt.Println("Перехвачено:", r)
		}
	}()

	fmt.Println("Перед паникой")
	mayPanic()
	fmt.Println("После паники (не выполняется без recover)")
}


// Когда в mayPanic() вызывается panic, 
// выполнение текущей функции (main) прерывается и начинается раскрутка стека. 
// На каждом уровне выполняются отложенные (defer) функции.

// ⚠️ Важный момент: recover() не «возвращает» программу обратно на строчку после mayPanic(). 
// Оно только останавливает падение. 
// То есть выполнение продолжается после defer, а не после mayPanic().

// Если хочется, чтобы после recover() программа продолжила работать, 
// нужно обернуть «опасный» код в отдельную функцию.


// !!!! recover не «возвращает» тебя внутрь функции, где случилась паника — оно только останавливает падение программы.